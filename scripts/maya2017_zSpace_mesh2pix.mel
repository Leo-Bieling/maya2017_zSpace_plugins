//----------------------------------------
// MAYA 2017 zSPACE MESH2PIX
//----------------------------------------
global string $version = "v0.2"; // Oct 2019
global string $pluginFileName = "maya2017_zSpace_Mesh2Pix.mll";
global string $nodeName = "maya_zSpace_M2P_";
global string $windowName = "zSpace_Mesh2Pix";

// ----- unload/load plugin
if(`pluginInfo -q -l $pluginFileName`)
{
    flushUndo;
    unloadPlugin -f $pluginFileName;
}
loadPlugin($pluginFileName);

// ----- clean up
global proc cleanUp()
{
    global string $windowName;
    global string $pluginFileName;

    flushUndo;
    unloadPlugin -f $pluginFileName;

    if(`window -exists $windowName`) deleteUI -window $windowName;
}

scriptJob -e "NewSceneOpened" cleanUp;
scriptJob -e "SceneOpened" cleanUp;

global proc cleanFile()
{    
    global string $pluginFileName;
    global string $nodeName;
    
    select -r $nodeName;
    select -add emptyMesh;
    doDelete;

    flushUndo;
    unloadPlugin -f $pluginFileName;
}

// ----- make connections
// get selection
string $seln[] = `filterExpand -sm 12`;

//conditions
if(size($seln) == 0)
{
    confirmDialog -title "zSpace_Mesh2Pix" -icon "information" -message "Please select a mesh." -button "Ok";
    cleanUp;
    error "No mesh selected!";
}

$tmp = `polyEvaluate -v`;

if ($tmp[0] > 256)
{
    confirmDialog -title "zSpace_Mesh2Pix" -icon "information" -message "Please select a mesh with less then 256 vertices." -button "Ok";
    cleanUp;
    error "Vertex count to high!";
}
    
string $inputMesh_m = $seln[0];
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;

// create necessary nodes
string $node = `createNode maya_zSpace_M2P`;
string $emptyMesh = `createNode mesh`;

// create necessary nodes
connectAttr -f ($inputMesh_m + ".outMesh") ( $node + ".inMesh");
connectAttr -f ($node + ".outMesh") ( $emptyMesh + ".inMesh");
    
select -r $emptyMesh;
sets -e -forceElement initialShadingGroup;
toggleShadeMode;

$parent = `listRelatives - parent $node` ;
rename $parent[0] $nodeName ;

$parent = `listRelatives - parent $emptyMesh`;
rename $parent[0] "emptyMesh";

// ----- procs for window 
global proc write_M2P_dataSet()
{
    setAttr "maya_zSpace_M2P.M2P_dataSet" 1;
}

global proc write_M2P_image()
{
    setAttr "maya_zSpace_M2P.M2P_predict" 1;
}

global proc read_M2P_prediction()
{
    setAttr "maya_zSpace_M2P.M2P_getPrediction" 1;
}

// ----- create Window 
if(`window -exists $windowName`) deleteUI -window $windowName;

window -backgroundColor 0.1 0.1 0.1 -title ($windowName + " " + $version) -cc cleanFile $windowName;
rowColumnLayout;

text -label "Write Mesh2Pix support data";
attrControlGrp -a ($nodeName +".imgOutputPath");
attrControlGrp -a ($nodeName +".fileName");
attrControlGrp -a ($nodeName +".maxOverhangAngle");
attrControlGrp -a ($nodeName +".train");
attrControlGrp -a ($nodeName +".perturb");
attrControlGrp -a ($nodeName +".perturbVector");
attrControlGrp -a ($nodeName +".dataSetSize");
button -w 200 -l "Create data" -c write_M2P_dataSet; 
separator -height 40 -style "double";

text -label "Write Mesh2Pix image";
attrControlGrp -a ($nodeName +".imgOutputPath");
attrControlGrp -a ($nodeName +".fileName");
button -w 200 -l "Create mesh image" -c write_M2P_image; 
separator -height 40 -style "double";

text -label "Read Mesh2Pix prediction image";
attrControlGrp -a ($nodeName +".imgInputPath");
attrControlGrp -a ($nodeName +".fileName");
button -w 200 -l "Read M2P prediction image" -c read_M2P_prediction; 
separator -height 40 -style "double";

showWindow $windowName;