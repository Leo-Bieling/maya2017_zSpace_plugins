//----------------------------------------
// MAYA zSPACE POLYTOPAL ARRAY 2017
//----------------------------------------

// ----- variables & dialog
string $seln[] = `filterExpand -sm 12`;
if(size($seln) == 0)
{
    confirmDialog -message "Please select Polyhedra." -button "Ok";
    error "No Polyhedra selected!";
}

makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;

confirmDialog -message "Please define the working directory/ folder in the next dialog window." -button "Ok";
string $directory[] =`fileDialog2 -fm 3 -cap "Select your working directory"`;
global string $nodeName = "maya_zSpace_polytopal";
string $windowName = "zSpace_Polytopal";

// ----- unload plugin
global proc unloadPlugs()
{
        unloadPlugin -f "maya_zSpace_Polytopal_2017.mll";
        print("unloadingPlugs\n");
}

// ----- clean file
scriptJob -e "NewSceneOpened"  unloadPlugs;

global proc cleanFile()
{    
    select -r |maya_zSpace_polytopal ;
    select -add resultMesh ;
    select -add polypackingMesh ;
    doDelete;
    
    setRendererInModelPanel "vp2Renderer" modelPanel1;
    setRendererInModelPanel "vp2Renderer" modelPanel2;
    setRendererInModelPanel "vp2Renderer" modelPanel3;
    setRendererInModelPanel "vp2Renderer" modelPanel4; 
}

// ----- change to legacy renderer
setRendererInModelPanel base_OpenGL_Renderer modelPanel1;
setRendererInModelPanel base_OpenGL_Renderer modelPanel2;
setRendererInModelPanel base_OpenGL_Renderer modelPanel3;
setRendererInModelPanel base_OpenGL_Renderer modelPanel4;

// ---------------------------------  make connections
catch (`loadPlugin("maya_zSpace_Polytopal_2017.mll")`);
{
    string $inputMeshes[];
    
    string $node = `createNode maya_zSpace_polytopal`;
    string $mesh = `createNode mesh`;
    string $explodemesh = `createNode mesh`;
  
    setAttr -type "string" ( $node + ".fileDirectory" ) $directory;
    
    for($i =0; $i <  size($seln); $i++)
    {
        $inputMeshes[$i] = $seln[$i];
    }
    
    for($i=0; $i<size($inputMeshes); $i++)
    {
        string $inMesh_m = $inputMeshes[$i];
            
        connectAttr -f ( $inMesh_m + ".outMesh") ( $node +".inMeshes[" + $i + "]");
    }
    
    //connectAttr -f ( $inputMesh + ".outMesh") ( $node +".inMesh" );
    
    connectAttr -f ( $node + ".outMesh") ( $mesh+".inMesh" );
    connectAttr -f ( $node + ".outMesh_explode") ( $explodemesh+".inMesh" );
    connectAttr -f time1.outTime ( $node + ".time" );

    select -r $mesh;
    sets -e -forceElement initialShadingGroup;
    toggleShadeMode;
    
    select -r $explodemesh;
    sets -e -forceElement initialShadingGroup;
    toggleShadeMode;
    
          
    $parent = `listRelatives - parent $node` ;
    rename $parent[0] $nodeName ;
    
    $parent = `listRelatives - parent $mesh` ;
    rename $parent[0] "resultMesh" ;  
    
    $parent = `listRelatives - parent $explodemesh` ;
    rename $parent[0] "polypackingMesh" ;
}

// ----- procs for window 
global proc setupPolyhedra()
{
setAttr "|maya_zSpace_polytopal.reset" 1;    
}



global proc exportGraphCurves()
{
setAttr "|maya_zSpace_polytopal.exportGraphCurves" 1;    
}

global proc exportJson()
{
setAttr "|maya_zSpace_polytopal.exportJson" 1;    
}

// ----- create window 
window -backgroundColor 0.1 0.1 0.1 -w 500 -title $windowName -closeCommand cleanFile $windowName;
rowColumnLayout -numberOfColumns 1 -columnWidth 1 400;

text -label "Setup";
button  -l "Setup/ Reset" -c setupPolyhedra; 
separator -height 40 -style "none";

text -label "Compute Equlibrium";
attrControlGrp -a ($nodeName +".AngleTolerance");
attrControlGrp -a ($nodeName +".minMax_formEdge");  	                 
attrControlGrp -a ($nodeName +".maxIterations");
attrControlGrp -a ($nodeName +".timeStep");
separator -height 20 -style "none";
attrControlGrp -a ($nodeName +".computeEquliibrium");
separator -height 40 -style "none";

text -label "IO";
button -l "Export Graph Cruves to Maya" -c exportGraphCurves; 
button -l "Export Json to Directory" -c computeEqui; 
           	          
showWindow $windowName;