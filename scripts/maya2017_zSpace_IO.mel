//----------------------------------------
// MAYA2017 zSPACE IO 
//----------------------------------------
global string $version = "v0.1"; // Oct 2019

// ----- unload/load plugin
if(`pluginInfo -q -l "maya2017_zSpace_JSON_IO.mll"`) unloadPlugin -f "maya2017_zSpace_JSON_IO.mll";
loadPlugin("maya2017_zSpace_JSON_IO.mll");

string $nodeName = "maya_zSpace_JSON_IO";

int $importCol;
string $node;
string $importMesh;
string $emptyMesh;
string $updatedPath;

// ----- procedures

// import graph procedure
global proc importGraphJSON()
{

    // create necessary nodes
	$node = `createNode -n "tmpNode" maya_zSpace_JSON`;
    $emptyMesh = `createNode mesh`;


    // rename node parent to select it later	
	$parent = `listRelatives - parent $node`;
    rename $parent[0] "Maya_zSpace_node_tmp";

    // make connection to emptyMesh
	connectAttr -f ("tmpNode.outMesh") ($emptyMesh + ".inMesh");

    // open dialog window for import
	string $filePath[] =`fileDialog2 -fileFilter "JSON (*.json)" -cap "Import graph as JSON"`;

   	if(size($filePath) != 0)
    {
        // set attributes
        setAttr -type "string" ("tmpNode.directoryPath") $filePath;
        setAttr ("tmpNode.importCurvesJson") 1; 

        refresh; // refresh necessary, otherwise it is not exporting

        // select and delete emptyMesh, zSpace node	and tmp Duplicate
        select $emptyMesh;
        pickWalk -d up;
	    select -add "Maya_zSpace_node_tmp";
        doDelete;
    }else
    {
        select $emptyMesh;
        pickWalk -d up;
	    select -add "Maya_zSpace_node_tmp";
        doDelete;
    }   
}


// export graph procedure
global proc exportGraphJSON()
{
    // get selection
	string $seln[] = ` ls -sl `;

    // get file path
    string $filePath[] =`fileDialog2 -fileFilter "JSON (*.json)" -cap "Export graph as JSON"`;

    // create necessary nodes
    $node = `createNode -n "tmpNode" maya_zSpace_JSON`;
    $emptyMesh = `createNode mesh`;

    // rename node parent to select it later	             
    $parent = `listRelatives - parent $node` ;
	rename $parent[0] "Maya_zSpace_node_tmp";
	
	// make connection to emptyMesh
	connectAttr -f ("tmpNode.outMesh") ($emptyMesh + ".inMesh");

    for($i = 0; $i < size($seln); $i++ )
    {
        // duplicate selection and freeze transformation
        select $seln[$i];
        duplicate -rr -n "tmpDuplicate";
        makeIdentity -apply true -t 1 -r 1 -s 1;

        // make connections and set attributes
        connectAttr -f ("tmpDuplicate.worldSpace") ("tmpNode.inCurves[" + $i + "]");
        
        select "tmpDuplicate";
        doDelete; 
    }

    // set attributes
    setAttr -type "string" ("tmpNode.directoryPath") $filePath;
    setAttr ("tmpNode.exportCurvesJson") 1; 

    refresh; // refresh necessary, otherwise it is not exporting

    // select and delete emptyMesh, zSpace node	and tmp Duplicate
    select $emptyMesh;
    pickWalk -d up;
	select -add "Maya_zSpace_node_tmp";
    doDelete;
}

// import mesh procedure
global proc importMeshJSON()
{
 	// get bool from checkBox called checkBox1
 	$importCol = `checkBox -q -v checkBoxImport`;

    // get bool from checkBox called checkBoxMultiFiles
 	$importMultiFiles = `checkBox -q -v checkBoxMultiFiles`;
 	
    // create necessary nodes
	$node = `createNode -n "tmpNode" maya_zSpace_JSON`;

    // rename node parent to select it later	
	$parent = `listRelatives - parent $node` ;
    rename $parent[0] "Maya_zSpace_node_tmp" ; 

    // open dialog window for import
	string $filePath[] =`fileDialog2 -fileFilter "JSON (*.json)" -cap "Import mesh as JSON"`;

    if(size($filePath) != 0)
    {
        if($importMultiFiles == 0)
        {	
            // create empty importMesh
    	    $importMesh = `createNode mesh`;

            // make connections and set attributes
    	    connectAttr -f ("tmpNode.outMesh") ($importMesh + ".inMesh");
            setAttr -type "string" ("tmpNode.directoryPath") $filePath[0];
    	    setAttr ("tmpNode.importMeshJson") 1;
            setAttr ("tmpNode.importMeshColors") $importCol;
            refresh; // refresh necessary, otherwise it is not importing

            // add the importMesh to the initialShaderGroup
    	    select $importMesh;
    	    sets -e -forceElement initialShadingGroup;
    	    toggleShadeMode;
    	    polySetToFaceNormal;

            // select and delete zSpace node					
    	    select "Maya_zSpace_node_tmp";		
    	    doDelete;
        }
        else
        {
            // getting the folder path
            string $buffer1[];
            $numTokens1 = `tokenize $filePath[0] "/" $buffer1`;

            string $folderPath;
            for ($i = 0; $i < ($numTokens1 - 1); $i++)
            {
                $folderPath = ($folderPath + $buffer1[$i] + "/");
            }

            $folderPath = `substring $folderPath 1 (size($folderPath) - 1)`;

            // getting array of all files in folder
            string $fileList[] = `getFileList -fld $folderPath`;

            // getting file full name
            string $fileNameSuf = $buffer1[(`size($buffer1)` - 1)];

            // getting file name withough suffix
            string $buffer2[];
            $numTokens2 = `tokenize $fileNameSuf "_" $buffer2`;

            // necessary in case someone is naming the file with "_" eg: "example_file"
            string $fileName;
            for ($i = 0; $i < ($numTokens2 - 1); $i++)
            {
                $fileName = ($fileName + $buffer2[$i] + "_");
            }

            // getting number of files
            int $numOfFiles;

            for ($i = 0; $i < `size($fileList)`; $i++)
            {
            	if(`match $fileName $fileList[$i]` == $fileName) $numOfFiles++;
            }

            // start loop to import each file
            for ($i = 0; $i < $numOfFiles; $i++)
            {
                // create empty importMesh
    	        $importMesh = `createNode mesh`;

                // make connections and set attributes
    	        connectAttr -f ("tmpNode.outMesh") ($importMesh + ".inMesh");
                setAttr -type "string" ("tmpNode.directoryPath") ($folderPath + "/" + $fileName + $i + ".json");
    	        setAttr ("tmpNode.importMeshJson") 1;
                setAttr ("tmpNode.importMeshColors") $importCol;
                refresh; // refresh necessary, otherwise it is not importing
                disconnectAttr ("tmpNode.outMesh") ($importMesh + ".inMesh");

                // add the importMesh to the initialShaderGroup
    	        select $importMesh;
    	        sets -e -forceElement initialShadingGroup;
    	        toggleShadeMode;
    	        polySetToFaceNormal;
            }

            // select and delete zSpace node					
    	    select "Maya_zSpace_node_tmp";		
    	    doDelete;


        }
    }
    else
    {
        // select and delete zSpace node					
    	select "Maya_zSpace_node_tmp";		
    	doDelete; 
    }
}

// export mesh procedure
global proc exportMeshJSON()
{
 	// get bool from checkBox called checkBox2
 	$exportCol = `checkBox -q -v checkBoxExport`;
 	
    // get selection
	string $seln[] = ` ls -sl `;
	
	// open dialog window for import
    string $filePath[] =`fileDialog2 -fileFilter "JSON (*.json)" -cap "Export mesh as JSON"`;
    
    // create necessary nodes
    $node = `createNode -n "tmpNode" maya_zSpace_JSON`;
    $emptyMesh = `createNode mesh`;
    
    // rename node parent to select it later	             
    $parent = `listRelatives - parent $node` ;
	rename $parent[0] "Maya_zSpace_node_tmp";
	
    // make connection to emptyMesh
	connectAttr -f ("tmpNode.outMesh") ($emptyMesh + ".inMesh");

    // start loop
    for($i = 0; $i < size($seln); $i++ )
    {		
        // duplicate selection and freeze transformation
        select $seln[$i];
        duplicate -rr -n "tmpDuplicate";
        makeIdentity -apply true -t 1 -r 1 -s 1;

        // make connections and set attributes
        connectAttr -f ("tmpDuplicate.outMesh") ("tmpNode.inMesh");

        // if multiple files add _i to the file name
        if(size($seln) == 1) $updatedPath = $filePath[0];
        else $updatedPath = `substring $filePath[0] 1 (size($filePath[0])-5)` + "_" + $i + ".json";

        // set attributes
        setAttr -type "string" ("tmpNode.directoryPath") $updatedPath;
        setAttr ("tmpNode.exportMeshJson") 1; 
        setAttr ("tmpNode.exportMeshColors") $exportCol;

        refresh; // refresh necessary, otherwise it is not exporting

        // delete tmpDuplicate mesh
        select -add "tmpDuplicate";
        doDelete;
    }    
 		
	// select and delete emptyMesh, zSpace node	and tmp Duplicate
    select $emptyMesh;
    pickWalk -d up;
	select -add "Maya_zSpace_node_tmp";
    doDelete;
} 

// ----- clean up when opening a new file
global proc unloadPlugs()
{
    string $version;
    print("unloadingPlugs \n ")    ;
    unloadPlugin("maya2017_zSpace_JSON_IO.mll");

    deleteUI -window "zSpace_IO";
}

scriptJob -e "NewSceneOpened" unloadPlugs;
scriptJob -e "SceneOpened" unloadPlugs;


// ----- create Window 
string $windowName = "zSpace_IO";

if(`window -exists $windowName`) deleteUI $windowName unloadPlugs;

window -backgroundColor 0.2 0.2 0.2 -title ($windowName + " " + $version)  -closeCommand "unloadPlugin(\"maya2017_zSpace_JSON_IO.mll\")" $windowName;
rowColumnLayout -numberOfColumns 3 -columnWidth 1 180 -columnWidth 2 100 -columnWidth 3 150;

text -label "Graph JSON";
separator -style "none";
separator -style "none";

button -label "export curve(s) to JSON"  -c exportGraphJSON;
separator -style "none";
separator -style "none";

button -label "import curve(s) from JSON"  -c importGraphJSON;
separator -style "none";
separator -style "none";

separator -height 20 -style "in";
separator -height 20 -style "in";
separator -height 20 -style "in";

text -label "Mesh JSON";
separator -style "none";
separator -style "none";

button -label "export mesh(es) to JSON"  -c exportMeshJSON;
checkBox -label "export colors" checkBoxExport;
separator -style "none";

button -label "import mesh(es) from JSON"  -c importMeshJSON;
checkBox -label "import colors" checkBoxImport;
checkBox -label "import multiple files" checkBoxMultiFiles;

setParent ..;

showWindow $windowName;