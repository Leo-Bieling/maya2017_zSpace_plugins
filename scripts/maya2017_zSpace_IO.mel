//----------------------------------------
// MAYA2017 zSPACE IO 
//----------------------------------------
global string $version = "v0.2"; // Oct 2019
global string $pluginFileName = "maya2017_zSpace_JSON_IO.mll";
global string $nodeName = "maya_zSpace_JSON";
global string $windowName = "zSpace_IO";
string $node;
string $emptyMesh;

// ----- unload/load plugin
if(`pluginInfo -q -l $pluginFileName`)
{
    flushUndo;
    unloadPlugin -f $pluginFileName;
}
loadPlugin($pluginFileName);

// ----- clean up
global proc cleanUp()
{
    global string $windowName;
    global string $pluginFileName;

    flushUndo;
    unloadPlugin -f $pluginFileName;

    if(`window -exists $windowName`) deleteUI -window $windowName;
}

scriptJob -e "NewSceneOpened" cleanUp;
scriptJob -e "SceneOpened" cleanUp;

// ----- procedures
// export graph TXT procedure
global proc exportGraphTXT()
{
    global string $windowName;

    //create List to store values
    string $allGroup[] = `ls- sl -fl`;
    string $arrayToPrint[];
    string $allCrvs[];
    clear $arrayToPrint;
    $arrayToPrint[0] = "#";

    if(size($allGroup) == 0)
    {
        confirmDialog -title $windowName -icon "information" -message "Please select a curve." -button "Ok";
        error "No curve selected!";
    }

    // open dialog window for import
    string $filePathExTXT[] =`fileDialog2 -fileFilter "TXT (*.txt)" -cap "Export curve group as TXT"`;
    if(size($filePathExTXT) == 0) error "No file selected!";

    //loop through all curves
    for ($grp in $allGroup)
    {
    	$allCrvs = `listRelatives -c $grp`;

    	for($Crv in  $allCrvs)
    	{
    	    $arrayToPrint[size($arrayToPrint)] = "{";
    	    int $NumOfSpan = `getAttr ($Crv+".spans")`;
    
    		for($i = 0; $i < ($NumOfSpan+1); $i++)
    		{
    			float $Pt[] = `pointPosition ($Crv+".ep["+$i+"]")`;
    			$arrayToPrint[size($arrayToPrint)] = ("v "+$Pt[0]+" "+$Pt[1]+" "+$Pt[2]);
    		}
    
    		$arrayToPrint[size($arrayToPrint)] = "}";
    	}
    	$arrayToPrint[size($arrayToPrint)] = "#";
    
    	clear $allCrvs;
    }

    //write to file
    $fileId = `fopen $filePathExTXT[0] "w"`;

    for($Line in $arrayToPrint)
    	fprint $fileId ($Line+"\n");

    fclose $fileId;
}

// export graph JSON procedure
global proc exportGraphJSON()
{
    global string $nodeName;
    global string $windowName;

    // get selection
	string $seln[] = `ls -sl`;
    
    if(size($seln) == 0)
    {
        confirmDialog -title $windowName -icon "information" -message "Please select a curve." -button "Ok";
        error "No curve selected!";
    }

    // get file path
    string $filePathExGraphJSON[] =`fileDialog2 -fileFilter "JSON (*.json)" -cap "Export graph as JSON"`;
    if(size($filePathExGraphJSON) == 0) error "No file selected!";

    // create necessary nodes
    $node = `createNode -n "tmpNode" $nodeName`;
    $emptyMesh = `createNode mesh`;

    // rename node parent to select it later	             
    $parent = `listRelatives - parent $node` ;
	rename $parent[0] "Maya_zSpace_node_tmp";
	
	// make connection to emptyMesh
	connectAttr -f ("tmpNode.outMesh") ($emptyMesh + ".inMesh");

    // make connection to tmpNode
    for($i = 0; $i < size($seln); $i++ )
    {
        // duplicate selection and freeze transformation
        select $seln[$i];
        duplicate -rr -n ("tmpDuplicate_" + $i);
        makeIdentity -apply true -t 1 -r 1 -s 1;

        // make connections and set attributes
        connectAttr -f ("tmpDuplicate_" + $i + ".worldSpace") ("tmpNode.inCurves[" + $i + "]");
    }
    refresh; // refresh necessary, otherwise it is not exporting

    // set attributes
    setAttr -type "string" ("tmpNode.directoryPath") $filePathExGraphJSON;
    setAttr ("tmpNode.exportCurvesJson") 1; 
    
    refresh; // refresh necessary, otherwise it is not exporting

    // delete duplicates
    for($i = 0; $i < size($seln); $i++ )
    {
        select ("tmpDuplicate_" + $i);
        doDelete; 
    }

    // select and delete emptyMesh, zSpace node	and tmp Duplicate
    select $emptyMesh;
    pickWalk -d up;
	select -add "Maya_zSpace_node_tmp";
    doDelete;
}

// import graph JSON procedure
global proc importGraphJSON()
{
    global string $nodeName;

    // open dialog window for import
	string $filePathImGraphJSON[] =`fileDialog2 -fileFilter "JSON (*.json)" -cap "Import graph as JSON"`;
    if(size($filePathImGraphJSON) == 0) error "No file selected!";

    // create necessary nodes
	$node = `createNode -n "tmpNode" $nodeName`;
    $emptyMesh = `createNode mesh`;

    // rename node parent to select it later	
	$parent = `listRelatives - parent $node`;
    rename $parent[0] "Maya_zSpace_node_tmp";

    // make connection to emptyMesh
	connectAttr -f ("tmpNode.outMesh") ($emptyMesh + ".inMesh");


   	if(size($filePathImGraphJSON) != 0)
    {
        // set attributes
        setAttr -type "string" ("tmpNode.directoryPath") $filePathImGraphJSON;
        setAttr ("tmpNode.importCurvesJson") 1; 

        refresh; // refresh necessary, otherwise it is not exporting

        // select and delete emptyMesh, zSpace node	and tmp Duplicate
        select $emptyMesh;
        pickWalk -d up;
	    select -add "Maya_zSpace_node_tmp";
        doDelete;
    }
    else
    {
        select $emptyMesh;
        pickWalk -d up;
	    select -add "Maya_zSpace_node_tmp";
        doDelete;
    }   
}

// export mesh procedure
global proc exportMeshJSON()
{
    global string $windowName;

 	// get bool from checkBox called checkBox2
 	$exportCol = `checkBox -q -v checkBoxExport`;
 	
    // get selection
	string $seln[] = ` ls -sl `;
    if(size($seln) == 0)
    {
        confirmDialog -title $windowName -icon "information" -message "Please select a mesh." -button "Ok";
        error "No mesh selected!";
    }
	
	// open dialog window for export
    string $filePathExMeshJSON[] =`fileDialog2 -fileFilter "JSON (*.json)" -cap "Export mesh as JSON"`;
    if(size($filePathExMeshJSON) == 0) error "No file selected!";

    // create necessary nodes
    $node = `createNode -n "tmpNode" maya_zSpace_JSON`;
    $emptyMesh = `createNode mesh`;
    
    // rename node parent to select it later	             
    $parent = `listRelatives - parent $node` ;
	rename $parent[0] "Maya_zSpace_node_tmp";
	
    // make connection to emptyMesh
	connectAttr -f ("tmpNode.outMesh") ($emptyMesh + ".inMesh");

    string $updatedPath;

    // start loop
    for($i = 0; $i < size($seln); $i++ )
    {		
        // duplicate selection and freeze transformation
        select $seln[$i];
        duplicate -rr -n "tmpDuplicate";
        makeIdentity -apply true -t 1 -r 1 -s 1;

        // make connections and set attributes
        connectAttr -f ("tmpDuplicate.outMesh") ("tmpNode.inMesh");

        // if multiple files add _i to the file name
        if(size($seln) == 1) $updatedPath = $filePathExMeshJSON[0];
        else $updatedPath = `substring $filePathExMeshJSON[0] 1 (size($filePathExMeshJSON[0])-5)` + "_" + $i + ".json";

        // set attributes
        setAttr -type "string" ("tmpNode.directoryPath") $updatedPath;
        setAttr ("tmpNode.exportMeshJson") 1; 
        setAttr ("tmpNode.exportMeshColors") $exportCol;

        refresh; // refresh necessary, otherwise it is not exporting

        // delete tmpDuplicate mesh
        select -add "tmpDuplicate";
        doDelete;
    }    
 		
	// select and delete emptyMesh, zSpace node	and tmp Duplicate
    select $emptyMesh;
    pickWalk -d up;
	select -add "Maya_zSpace_node_tmp";
    doDelete;
} 

// import mesh procedure
global proc importMeshJSON()
{
    string $importMesh;

    // open dialog window for import
	string $filePathImMeshJSON[] =`fileDialog2 -fileFilter "JSON (*.json)" -cap "Import mesh as JSON"`;
    if(size($filePathImMeshJSON) == 0) error "No file selected!";

 	// get bool from checkBox called checkBox1
 	int $importCol = `checkBox -q -v checkBoxImport`;

    // get bool from checkBox called checkBoxMultiFiles
 	$importMultiFiles = `checkBox -q -v checkBoxMultiFiles`;
 	
    // create necessary nodes
	$node = `createNode -n "tmpNode" maya_zSpace_JSON`;

    // rename node parent to select it later	
	$parent = `listRelatives - parent $node` ;
    rename $parent[0] "Maya_zSpace_node_tmp" ; 

  
    if($importMultiFiles == 0)
    {	
        // create empty importMesh
        $importMesh = `createNode mesh`;
        
        // make connections and set attributes
        connectAttr -f ("tmpNode.outMesh") ($importMesh + ".inMesh");
        setAttr -type "string" ("tmpNode.directoryPath") $filePathImMeshJSON[0];
        setAttr ("tmpNode.importMeshJson") 1;
        setAttr ("tmpNode.importMeshColors") $importCol;

        refresh; // refresh necessary, otherwise it is not importing

        // add the importMesh to the initialShaderGroup
        select $importMesh;
        sets -e -forceElement initialShadingGroup;
        toggleShadeMode;
        polySetToFaceNormal;

        // select and delete zSpace node					
        select "Maya_zSpace_node_tmp";		
        doDelete;
    }
    else
    {
        // getting the folder path
        string $buffer1[];
        $numTokens1 = `tokenize $filePathImMeshJSON[0] "/" $buffer1`;

        string $folderPath;
        for ($i = 0; $i < ($numTokens1 - 1); $i++)
        {
            $folderPath = ($folderPath + $buffer1[$i] + "/");
        }

        $folderPath = `substring $folderPath 1 (size($folderPath) - 1)`;

        // getting array of all files in folder
        string $fileList[] = `getFileList -fld $folderPath`;

        // getting file full name
        string $fileNameSuf = $buffer1[(`size($buffer1)` - 1)];

        // getting file name withough suffix
        string $buffer2[];
        $numTokens2 = `tokenize $fileNameSuf "_" $buffer2`;

        // necessary in case someone is naming the file with "_" eg: "example_file"
        string $fileName;
        for ($i = 0; $i < ($numTokens2 - 1); $i++)
        {
            $fileName = ($fileName + $buffer2[$i] + "_");
        }

        // getting number of files
        int $numOfFiles = 0;

        for ($i = 0; $i < `size($fileList)`; $i++)
        	if(`match $fileName $fileList[$i]` == $fileName)
                $numOfFiles++;

            
        

        // start loop to import each file
        for ($i = 0; $i < $numOfFiles; $i++)
        {
            // create empty importMesh
            $importMesh = `createNode mesh`;

            // make connections and set attributes
            connectAttr -f ("tmpNode.outMesh") ($importMesh + ".inMesh");
            setAttr -type "string" ("tmpNode.directoryPath") ($folderPath + "/" + $fileName + $i + ".json");
            setAttr ("tmpNode.importMeshJson") 1;
            setAttr ("tmpNode.importMeshColors") $importCol;
            refresh; // refresh necessary, otherwise it is not importing
            disconnectAttr ("tmpNode.outMesh") ($importMesh + ".inMesh");

            // add the importMesh to the initialShaderGroup
            select $importMesh;
            sets -e -forceElement initialShadingGroup;
            toggleShadeMode;
            polySetToFaceNormal;
        }

        //select and delete zSpace node					
    	select "Maya_zSpace_node_tmp";		
    	doDelete;
    }
}

// ----- create Window 
if(`window -exists $windowName`) deleteUI -window $windowName;

window -bgc 0.1 0.1 0.1 -t ($windowName + " " + $version) -cc "flushUndo; unloadPlugin -f $pluginFileName;" $windowName;
rowColumnLayout -nc 3 -cw 1 180 -cw 2 100 -cw 3 150;

text -label "Graph TXT";
separator -style "none";
separator -style "none";

button -label "export curve group to TXT"  -c exportGraphTXT;
separator -style "none";
separator -style "none";

//////////////////////////////
text -label "";
text -label "";
text -label "";
//////////////////////////////

text -label "Graph JSON";
separator -style "none";
separator -style "none";

button -label "export curve(s) to JSON"  -c exportGraphJSON;
separator -style "none";
separator -style "none";

button -label "import curve(s) from JSON"  -c importGraphJSON;
separator -style "none";
separator -style "none";

//////////////////////////////
text -label "";
text -label "";
text -label "";
//////////////////////////////

text -label "Mesh JSON";
separator -style "none";
separator -style "none";

button -label "export mesh(es) to JSON"  -c exportMeshJSON;
checkBox -label "export colors" checkBoxExport;
separator -style "none";

button -label "import mesh(es) from JSON"  -c importMeshJSON;
checkBox -label "import colors" checkBoxImport;
checkBox -label "import multiple files" checkBoxMultiFiles;

setParent ..;

showWindow $windowName;